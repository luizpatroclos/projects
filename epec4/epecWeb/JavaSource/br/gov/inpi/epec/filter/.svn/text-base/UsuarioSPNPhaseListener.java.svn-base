package br.com.cpmbraxis.ebt.web.filter;

import java.io.IOException;
import java.security.Principal;
import java.util.Collection;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.PhaseEvent;
import javax.faces.event.PhaseId;
import javax.faces.event.PhaseListener;
import javax.naming.NamingException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import br.com.cpmbraxis.ebt.delegates.AutentificacaoSPNDelegate;
import br.com.cpmbraxis.ebt.delegates.ParametrosDelegate;
import br.com.cpmbraxis.ebt.services.ProcessingException;
import br.com.cpmbraxis.ebt.web.constantes.ConsultasSP;
import br.com.cpmbraxis.ebt.web.modelo.UsuarioSPN;
import br.com.cpmbraxis.ebt.web.util.SPNUtil;

public class UsuarioSPNPhaseListener implements PhaseListener {
	
	private UsuarioSPN usuarioSPN = new UsuarioSPN();
	private HttpSession session;
	private String user = null;
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	

	@Override
	public void afterPhase(PhaseEvent event) {

		FacesContext fc = event.getFacesContext();
        
		ExternalContext ec = fc.getExternalContext();
        
     // Obtém a página que atualmente está interagindo com o ciclo
        String paginaAtual = fc.getViewRoot().getViewId();
        
     // Se for a página 'loginSPN.xhtml' seta a variável como true
        boolean isLoginPage = paginaAtual.lastIndexOf(ConsultasSP.PAGINA_LOGIN) > -1;
        
     // Obtém a sessão atual
        HttpSession sessao = (HttpSession) ec.getSession(true);
        
     // Restaga o nome do usuário logado da sessão
        UsuarioSPN usuario = (UsuarioSPN) sessao.getAttribute(ConsultasSP.USUARIO);
        
        // Verifica se o usuário está logado e se não está na página de login
        if (!isLoginPage && usuario == null) {
        	
        	fc.getApplication().getNavigationHandler().handleNavigation(fc, null, "/"+ConsultasSP.OUTCOME_LOGIN);
        	
        } else if (isLoginPage && usuario != null) {
	
        		fc.getApplication().getNavigationHandler().handleNavigation(fc, null, ConsultasSP.PAGINA_HOME);
        	
          } else if (!isLoginPage && usuario != null ){
        	
         	 	if(!usuario.isUrlAutorizada(paginaAtual)){
     				
       				fc.getApplication().getNavigationHandler().handleNavigation(fc, null, ConsultasSP.PAGINA_HOME);
    				fc.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Acesso Negado:", "O usuário não tem permissão para acessar a pagina."));
    				
        	 }
        	
        }
        
	}

	@Override
	public void beforePhase(PhaseEvent arg0) {//

		FacesContext fctx = FacesContext.getCurrentInstance();
		ExternalContext ectx = fctx.getExternalContext();
		HttpServletResponse response = (HttpServletResponse) ectx.getResponse();
		response.addHeader("X-UA-Compatible", "IE=8");
		
	}
	
		@Override
	public PhaseId getPhaseId() {
		// TODO Auto-generated method stub
		return PhaseId.RESTORE_VIEW;
		//return PhaseId.ANY_PHASE;
	}

}
